{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48],"program":"C:\\Users\\Will Regan\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","window","C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=977f2bdac59b27c5","-C","extra-filename=-977f2bdac59b27c5","--out-dir","c:\\Users\\Will Regan\\Documents\\GitHub\\ApeRust\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Will Regan\\Documents\\GitHub\\ApeRust\\target\\rls\\debug\\deps","--extern","input=c:\\Users\\Will Regan\\Documents\\GitHub\\ApeRust\\target\\rls\\debug\\deps\\libinput-5be51fa807987216.rmeta","--extern","shader_version=c:\\Users\\Will Regan\\Documents\\GitHub\\ApeRust\\target\\rls\\debug\\deps\\libshader_version-a922f0f81fd621e3.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Will Regan\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":[99,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,68,111,99,117,109,101,110,116,115,92,71,105,116,72,117,98,92,65,112,101,82,117,115,116,92,116,97,114,103,101,116,92,114,108,115,92,100,101,98,117,103,92,100,101,112,115,92,108,105,98,119,105,110,100,111,119,45,57,55,55,102,50,98,100,97,99,53,57,98,50,55,99,53,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"window","disambiguator":[4807984572342049565,4743731966088940049]},"crate_root":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src","external_crates":[{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7528587287462463925,14365138709353428393]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":2,"id":{"name":"core","disambiguator":[6961983669911787511,12763790138191559993]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8881479335952209253,7175408585981261641]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10606302774101958091,6394453555634565640]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[951275427296451120,15089112833676159407]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16986482155481050220,8110678813127715211]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[14152113043115722454,14996294870991823280]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[16544231974546559170,12284481576050828670]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[10490126003503044219,3700128015989034145]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[5553849915308501608,7293799346724567721]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":11,"id":{"name":"shader_version","disambiguator":[5362385933197664329,896089315022436165]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":12,"id":{"name":"input","disambiguator":[7733748495383107691,17139602380588775225]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":13,"id":{"name":"bitflags","disambiguator":[18156234661279981144,13893786402208207145]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":14,"id":{"name":"serde_derive","disambiguator":[4860609822197901777,1906193451606741065]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":15,"id":{"name":"serde","disambiguator":[7010660935021415825,7360591342527194135]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":16,"id":{"name":"viewport","disambiguator":[8609586963123096492,10807824680676184685]}},{"file_name":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","num":17,"id":{"name":"float","disambiguator":[11650288346795895708,3620170980127200804]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":26393,"line_start":1,"line_end":810,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":44},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1284,"byte_end":1292,"line_start":34,"line_end":34,"column_start":20,"column_end":28},"alias_span":null,"name":"NoWindow","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":26393,"line_start":1,"line_end":810,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Will Regan\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.37.0\\src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":98},{"krate":0,"index":296},{"krate":0,"index":310},{"krate":0,"index":308},{"krate":0,"index":304},{"krate":0,"index":298},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":108},{"krate":0,"index":112},{"krate":0,"index":116},{"krate":0,"index":120},{"krate":0,"index":124},{"krate":0,"index":128},{"krate":0,"index":314},{"krate":0,"index":332},{"krate":0,"index":330},{"krate":0,"index":326},{"krate":0,"index":320},{"krate":0,"index":316},{"krate":0,"index":132},{"krate":0,"index":136},{"krate":0,"index":140},{"krate":0,"index":144},{"krate":0,"index":148},{"krate":0,"index":152},{"krate":0,"index":170},{"krate":0,"index":206},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":214}],"decl_id":null,"docs":" Window storage and interfacing traits.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"deny(missing_copy_implementations)","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":23,"byte_end":61,"line_start":2,"line_end":2,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":44},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":27099,"byte_end":27107,"line_start":21,"line_end":21,"column_start":12,"column_end":20},"name":"NoWindow","qualname":"::no_window::NoWindow","value":"NoWindow {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":27}],"decl_id":null,"docs":" A window without user interface, often used in server event loops.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":27279,"byte_end":27282,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<NoWindow>::new","value":"fn (settings: &WindowSettings) -> NoWindow","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `NoWindow`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1495,"byte_end":1506,"line_start":43,"line_end":43,"column_start":10,"column_end":21},"name":"ProcAddress","qualname":"::ProcAddress","value":"*const ()","parent":null,"children":[],"decl_id":null,"docs":" The type of an OpenGL function address.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":296},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1943,"byte_end":1947,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"Size","qualname":"::Size","value":"Size { width, height }","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":71}],"decl_id":null,"docs":" Structure to store the window size.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1932,"byte_end":2031,"line_start":54,"line_end":59,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":69},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1977,"byte_end":1982,"line_start":56,"line_end":56,"column_start":9,"column_end":14},"name":"width","qualname":"::Size::width","value":"f64","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" The width.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":71},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2017,"byte_end":2023,"line_start":58,"line_end":58,"column_start":9,"column_end":15},"name":"height","qualname":"::Size::height","value":"f64","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" The height.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":314},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3819,"byte_end":3827,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"Position","qualname":"::Position","value":"Position { x, y }","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75}],"decl_id":null,"docs":" Structure to store the window position.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3808,"byte_end":3915,"line_start":138,"line_end":143,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3808,"byte_end":3915,"line_start":138,"line_end":143,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":73},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3864,"byte_end":3865,"line_start":140,"line_end":140,"column_start":9,"column_end":10},"name":"x","qualname":"::Position::x","value":"i32","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" The x coordinate.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":75},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3906,"byte_end":3907,"line_start":142,"line_end":142,"column_start":9,"column_end":10},"name":"y","qualname":"::Position::y","value":"i32","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" The y coordinate.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":148},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":4869,"byte_end":4892,"line_start":185,"line_end":185,"column_start":11,"column_end":34},"name":"BuildFromWindowSettings","qualname":"::BuildFromWindowSettings","value":"BuildFromWindowSettings: Sized","parent":null,"children":[{"krate":0,"index":150}],"decl_id":null,"docs":" Constructs a window from a [`WindowSettings`](./struct.WindowSettings.html)\n object.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":5141,"byte_end":5167,"line_start":192,"line_end":192,"column_start":8,"column_end":34},"name":"build_from_window_settings","qualname":"::BuildFromWindowSettings::build_from_window_settings","value":"fn (settings: &WindowSettings) -> Result<Self, Box<Error>>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Builds the window from a `WindowSettings` object.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":152},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":5534,"byte_end":5540,"line_start":201,"line_end":201,"column_start":11,"column_end":17},"name":"Window","qualname":"::Window","value":"Window","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168}],"decl_id":null,"docs":" Trait representing the minimum requirements for defining a window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":5598,"byte_end":5614,"line_start":203,"line_end":203,"column_start":8,"column_end":24},"name":"set_should_close","qualname":"::Window::set_should_close","value":"fn (&mut self, value: bool) -> ()","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Tells the window to close or stay open.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":5697,"byte_end":5709,"line_start":206,"line_end":206,"column_start":8,"column_end":20},"name":"should_close","qualname":"::Window::should_close","value":"fn (&self) -> bool","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Returns true if the window should close.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":5771,"byte_end":5775,"line_start":209,"line_end":209,"column_start":8,"column_end":12},"name":"size","qualname":"::Window::size","value":"fn (&self) -> Size","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Gets the size of the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6035,"byte_end":6047,"line_start":216,"line_end":216,"column_start":8,"column_end":20},"name":"swap_buffers","qualname":"::Window::swap_buffers","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Swaps render buffers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6146,"byte_end":6156,"line_start":219,"line_end":219,"column_start":8,"column_end":18},"name":"wait_event","qualname":"::Window::wait_event","value":"fn (&mut self) -> Input","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Wait indefinitely for an input event to be available from the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6385,"byte_end":6403,"line_start":225,"line_end":225,"column_start":8,"column_end":26},"name":"wait_event_timeout","qualname":"::Window::wait_event_timeout","value":"fn (&mut self, timeout: Duration) -> Option<Input>","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Wait for an input event to be available from the window or for the\n specified timeout to be reached.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6560,"byte_end":6570,"line_start":230,"line_end":230,"column_start":8,"column_end":18},"name":"poll_event","qualname":"::Window::poll_event","value":"fn (&mut self) -> Option<Input>","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Polls an input event from the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6903,"byte_end":6912,"line_start":239,"line_end":239,"column_start":8,"column_end":17},"name":"draw_size","qualname":"::Window::draw_size","value":"fn (&self) -> Size","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Gets the draw size of the window.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":170},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7241,"byte_end":7255,"line_start":248,"line_end":248,"column_start":11,"column_end":25},"name":"AdvancedWindow","qualname":"::AdvancedWindow","value":"AdvancedWindow: Window + Sized","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204}],"decl_id":null,"docs":" Trait representing a window with the most features that are still generic.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7329,"byte_end":7338,"line_start":250,"line_end":250,"column_start":8,"column_end":17},"name":"get_title","qualname":"::AdvancedWindow::get_title","value":"fn (&self) -> String","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Gets a copy of the title of the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7403,"byte_end":7412,"line_start":253,"line_end":253,"column_start":8,"column_end":17},"name":"set_title","qualname":"::AdvancedWindow::set_title","value":"fn (&mut self, value: String) -> ()","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets the title of the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7641,"byte_end":7646,"line_start":260,"line_end":260,"column_start":8,"column_end":13},"name":"title","qualname":"::AdvancedWindow::title","value":"fn (mut self, value: String) -> Self","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets title on window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7829,"byte_end":7844,"line_start":268,"line_end":268,"column_start":8,"column_end":23},"name":"get_exit_on_esc","qualname":"::AdvancedWindow::get_exit_on_esc","value":"fn (&self) -> bool","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Gets whether to exit when pressing esc.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7958,"byte_end":7973,"line_start":273,"line_end":273,"column_start":8,"column_end":23},"name":"set_exit_on_esc","qualname":"::AdvancedWindow::set_exit_on_esc","value":"fn (&mut self, value: bool) -> ()","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets whether to exit when pressing esc.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":8282,"byte_end":8293,"line_start":282,"line_end":282,"column_start":8,"column_end":19},"name":"exit_on_esc","qualname":"::AdvancedWindow::exit_on_esc","value":"fn (mut self, value: bool) -> Self","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets whether to exit when pressing the Esc button.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":8526,"byte_end":8545,"line_start":291,"line_end":291,"column_start":8,"column_end":27},"name":"get_automatic_close","qualname":"::AdvancedWindow::get_automatic_close","value":"fn (&self) -> bool","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Gets whether the window will automatically close when attempting\n to close it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":8952,"byte_end":8971,"line_start":300,"line_end":300,"column_start":8,"column_end":27},"name":"set_automatic_close","qualname":"::AdvancedWindow::set_automatic_close","value":"fn (&mut self, value: bool) -> ()","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets whether the window will automatically close when attempting\n to close it. If this is disabled, attempts to close the window\n can be detected via an `Input::Close(..)` event, and\n [`Window::set_should_close()`](trait.Window.html#tymethod.set_should_close)\n can be called to actually close the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":9570,"byte_end":9585,"line_start":313,"line_end":313,"column_start":8,"column_end":23},"name":"automatic_close","qualname":"::AdvancedWindow::automatic_close","value":"fn (mut self, value: bool) -> Self","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets whether the window will automatically close when attempting\n to close it. If this is disabled, attempts to close the window\n can be detected via an `Input::Close(..)` event, and\n [`Window::set_should_close()`](trait.Window.html#tymethod.set_should_close)\n can be called to actually close the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":9856,"byte_end":9874,"line_start":322,"line_end":322,"column_start":8,"column_end":26},"name":"set_capture_cursor","qualname":"::AdvancedWindow::set_capture_cursor","value":"fn (&mut self, value: bool) -> ()","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets whether to capture/grab the cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10138,"byte_end":10152,"line_start":329,"line_end":329,"column_start":8,"column_end":22},"name":"capture_cursor","qualname":"::AdvancedWindow::capture_cursor","value":"fn (mut self, value: bool) -> Self","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets whether to capture/grab the cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10358,"byte_end":10362,"line_start":337,"line_end":337,"column_start":8,"column_end":12},"name":"show","qualname":"::AdvancedWindow::show","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Shows the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10488,"byte_end":10492,"line_start":342,"line_end":342,"column_start":8,"column_end":12},"name":"hide","qualname":"::AdvancedWindow::hide","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Hides the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10620,"byte_end":10632,"line_start":347,"line_end":347,"column_start":8,"column_end":20},"name":"get_position","qualname":"::AdvancedWindow::get_position","value":"fn (&self) -> Option<Position>","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Gets the position of window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10776,"byte_end":10788,"line_start":352,"line_end":352,"column_start":8,"column_end":20},"name":"set_position","qualname":"::AdvancedWindow::set_position","value":"fn <P> (&mut self, val: P) -> ()","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets the position of window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10932,"byte_end":10940,"line_start":357,"line_end":357,"column_start":8,"column_end":16},"name":"set_size","qualname":"::AdvancedWindow::set_size","value":"fn <S> (&mut self, val: S) -> ()","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets the window size.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":11260,"byte_end":11268,"line_start":366,"line_end":366,"column_start":8,"column_end":16},"name":"position","qualname":"::AdvancedWindow::position","value":"fn <P> (mut self, val: P) -> Self","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets the position of window.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":206},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12001,"byte_end":12013,"line_start":385,"line_end":385,"column_start":11,"column_end":23},"name":"OpenGLWindow","qualname":"::OpenGLWindow","value":"OpenGLWindow: Window","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212}],"decl_id":null,"docs":" Trait for OpenGL specific operations on a window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12181,"byte_end":12197,"line_start":389,"line_end":389,"column_start":8,"column_end":24},"name":"get_proc_address","qualname":"::OpenGLWindow::get_proc_address","value":"fn (&mut self, proc_name: &str) -> ProcAddress","parent":{"krate":0,"index":206},"children":[],"decl_id":null,"docs":" Returns the address of the specified OpenGL function if it exists.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12326,"byte_end":12336,"line_start":392,"line_end":392,"column_start":8,"column_end":18},"name":"is_current","qualname":"::OpenGLWindow::is_current","value":"fn (&self) -> bool","parent":{"krate":0,"index":206},"children":[],"decl_id":null,"docs":" Returns true if this window's gl context is the current gl context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12422,"byte_end":12434,"line_start":395,"line_end":395,"column_start":8,"column_end":20},"name":"make_current","qualname":"::OpenGLWindow::make_current","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":206},"children":[],"decl_id":null,"docs":" Make the window's gl context the current gl context.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":336},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12797,"byte_end":12811,"line_start":405,"line_end":405,"column_start":12,"column_end":26},"name":"WindowSettings","qualname":"::WindowSettings","value":"WindowSettings {  }","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99}],"decl_id":null,"docs":" Settings structure for window behavior.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":13357,"byte_end":13360,"line_start":431,"line_end":431,"column_start":12,"column_end":15},"name":"new","qualname":"<WindowSettings>::new","value":"fn <T, S> (title: T, size: S) -> WindowSettings","parent":null,"children":[],"decl_id":null,"docs":" Creates window settings with defaults.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":14316,"byte_end":14321,"line_start":459,"line_end":459,"column_start":12,"column_end":17},"name":"build","qualname":"<WindowSettings>::build","value":"fn <W> (&self) -> Result<W, Box<Error>>","parent":null,"children":[],"decl_id":null,"docs":" Builds window from the given settings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":14509,"byte_end":14518,"line_start":464,"line_end":464,"column_start":12,"column_end":21},"name":"get_title","qualname":"<WindowSettings>::get_title","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Gets the title of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":14624,"byte_end":14633,"line_start":469,"line_end":469,"column_start":12,"column_end":21},"name":"set_title","qualname":"<WindowSettings>::set_title","value":"fn (&mut self, value: String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the title of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":14910,"byte_end":14915,"line_start":478,"line_end":478,"column_start":12,"column_end":17},"name":"title","qualname":"<WindowSettings>::title","value":"fn (mut self, value: String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the title of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":15053,"byte_end":15061,"line_start":484,"line_end":484,"column_start":12,"column_end":20},"name":"get_size","qualname":"<WindowSettings>::get_size","value":"fn (&self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Gets the size of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":15155,"byte_end":15163,"line_start":489,"line_end":489,"column_start":12,"column_end":20},"name":"set_size","qualname":"<WindowSettings>::set_size","value":"fn (&mut self, value: Size) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":15434,"byte_end":15438,"line_start":498,"line_end":498,"column_start":12,"column_end":16},"name":"size","qualname":"<WindowSettings>::size","value":"fn (mut self, value: Size) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":15588,"byte_end":15602,"line_start":504,"line_end":504,"column_start":12,"column_end":26},"name":"get_fullscreen","qualname":"<WindowSettings>::get_fullscreen","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows will be fullscreen.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":15717,"byte_end":15731,"line_start":509,"line_end":509,"column_start":12,"column_end":26},"name":"set_fullscreen","qualname":"<WindowSettings>::set_fullscreen","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows will be fullscreen.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":16035,"byte_end":16045,"line_start":518,"line_end":518,"column_start":12,"column_end":22},"name":"fullscreen","qualname":"<WindowSettings>::fullscreen","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows will be fullscreen.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":16222,"byte_end":16237,"line_start":524,"line_end":524,"column_start":12,"column_end":27},"name":"get_exit_on_esc","qualname":"<WindowSettings>::get_exit_on_esc","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should exit when the Esc key is pressed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":16374,"byte_end":16389,"line_start":529,"line_end":529,"column_start":12,"column_end":27},"name":"set_exit_on_esc","qualname":"<WindowSettings>::set_exit_on_esc","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should exit when the Esc key is pressed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":16717,"byte_end":16728,"line_start":538,"line_end":538,"column_start":12,"column_end":23},"name":"exit_on_esc","qualname":"<WindowSettings>::exit_on_esc","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should exit when the Esc key is pressed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":16934,"byte_end":16953,"line_start":545,"line_end":545,"column_start":12,"column_end":31},"name":"get_automatic_close","qualname":"<WindowSettings>::get_automatic_close","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should automatically close when the X or\n ALT+F4 are pressed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":17369,"byte_end":17388,"line_start":554,"line_end":554,"column_start":12,"column_end":31},"name":"set_automatic_close","qualname":"<WindowSettings>::set_automatic_close","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should automatically close when the X or\n ALT+F4 are pressed. If this is disabled, attempts to close the window\n can be detected via an `Input::Close(..)` event, and\n [`Window::set_should_close()`](trait.Window.html#tymethod.set_should_close)\n can be called to actually close the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":18003,"byte_end":18018,"line_start":567,"line_end":567,"column_start":12,"column_end":27},"name":"automatic_close","qualname":"<WindowSettings>::automatic_close","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should automatically close when the X or\n ALT+F4 are pressed. If this is disabled, attempts to close the window\n can be detected via an `Input::Close(..)` event, and\n [`Window::set_should_close()`](trait.Window.html#tymethod.set_should_close)\n can be called to actually close the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":18291,"byte_end":18302,"line_start":576,"line_end":576,"column_start":12,"column_end":23},"name":"get_samples","qualname":"<WindowSettings>::get_samples","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of samples to use for anti-aliasing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":18524,"byte_end":18535,"line_start":584,"line_end":584,"column_start":12,"column_end":23},"name":"set_samples","qualname":"<WindowSettings>::set_samples","value":"fn (&mut self, value: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of samples to use for anti-aliasing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":18939,"byte_end":18946,"line_start":596,"line_end":596,"column_start":12,"column_end":19},"name":"samples","qualname":"<WindowSettings>::samples","value":"fn (mut self, value: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of samples to use for anti-aliasing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":19202,"byte_end":19211,"line_start":605,"line_end":605,"column_start":12,"column_end":21},"name":"get_vsync","qualname":"<WindowSettings>::get_vsync","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should use vsync.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":19426,"byte_end":19435,"line_start":613,"line_end":613,"column_start":12,"column_end":21},"name":"set_vsync","qualname":"<WindowSettings>::set_vsync","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use vsync.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":19829,"byte_end":19834,"line_start":625,"line_end":625,"column_start":12,"column_end":17},"name":"vsync","qualname":"<WindowSettings>::vsync","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use vsync.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":20326,"byte_end":20342,"line_start":638,"line_end":638,"column_start":12,"column_end":28},"name":"get_maybe_opengl","qualname":"<WindowSettings>::get_maybe_opengl","value":"fn (&self) -> Option<OpenGL>","parent":null,"children":[],"decl_id":null,"docs":" Gets the OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":20792,"byte_end":20808,"line_start":650,"line_end":650,"column_start":12,"column_end":28},"name":"set_maybe_opengl","qualname":"<WindowSettings>::set_maybe_opengl","value":"fn (&mut self, value: Option<OpenGL>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":21453,"byte_end":21465,"line_start":666,"line_end":666,"column_start":12,"column_end":24},"name":"maybe_opengl","qualname":"<WindowSettings>::maybe_opengl","value":"fn (mut self, value: Option<OpenGL>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":21880,"byte_end":21890,"line_start":678,"line_end":678,"column_start":12,"column_end":22},"name":"set_opengl","qualname":"<WindowSettings>::set_opengl","value":"fn (&mut self, value: OpenGL) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":22433,"byte_end":22439,"line_start":693,"line_end":693,"column_start":12,"column_end":18},"name":"opengl","qualname":"<WindowSettings>::opengl","value":"fn (mut self, value: OpenGL) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":23062,"byte_end":23070,"line_start":708,"line_end":708,"column_start":12,"column_end":20},"name":"get_srgb","qualname":"<WindowSettings>::get_srgb","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should use hardware accelerated color conversion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":23315,"byte_end":23323,"line_start":716,"line_end":716,"column_start":12,"column_end":20},"name":"set_srgb","qualname":"<WindowSettings>::set_srgb","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use hardware accelerated color conversion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":23745,"byte_end":23749,"line_start":728,"line_end":728,"column_start":12,"column_end":16},"name":"srgb","qualname":"<WindowSettings>::srgb","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use hardware accelerated color conversion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":23900,"byte_end":23913,"line_start":734,"line_end":734,"column_start":12,"column_end":25},"name":"get_resizable","qualname":"<WindowSettings>::get_resizable","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should be resizable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":24028,"byte_end":24041,"line_start":739,"line_end":739,"column_start":12,"column_end":25},"name":"set_resizable","qualname":"<WindowSettings>::set_resizable","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be resizable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":24343,"byte_end":24352,"line_start":748,"line_end":748,"column_start":12,"column_end":21},"name":"resizable","qualname":"<WindowSettings>::resizable","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be resizable.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":24734,"byte_end":24747,"line_start":760,"line_end":760,"column_start":12,"column_end":25},"name":"get_decorated","qualname":"<WindowSettings>::get_decorated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should be decorated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":25088,"byte_end":25101,"line_start":771,"line_end":771,"column_start":12,"column_end":25},"name":"set_decorated","qualname":"<WindowSettings>::set_decorated","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be decorated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":25629,"byte_end":25638,"line_start":786,"line_end":786,"column_start":12,"column_end":21},"name":"decorated","qualname":"<WindowSettings>::decorated","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be decorated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":25808,"byte_end":25823,"line_start":792,"line_end":792,"column_start":12,"column_end":27},"name":"get_controllers","qualname":"<WindowSettings>::get_controllers","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should listen to controller input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":25954,"byte_end":25969,"line_start":797,"line_end":797,"column_start":12,"column_end":27},"name":"set_controllers","qualname":"<WindowSettings>::set_controllers","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should listen to controller input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":26291,"byte_end":26302,"line_start":806,"line_end":806,"column_start":12,"column_end":23},"name":"controllers","qualname":"<WindowSettings>::controllers","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether build windows should listen to controller input.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":27223,"byte_end":27231,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":27588,"byte_end":27596,"line_start":42,"line_end":42,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":28218,"byte_end":28226,"line_start":74,"line_end":74,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":28470,"byte_end":28478,"line_start":83,"line_end":83,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2057,"byte_end":2061,"line_start":61,"line_end":61,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2256,"byte_end":2260,"line_start":71,"line_end":71,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2443,"byte_end":2447,"line_start":81,"line_end":81,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2644,"byte_end":2648,"line_start":91,"line_end":91,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3941,"byte_end":3949,"line_start":145,"line_end":145,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":4131,"byte_end":4139,"line_start":155,"line_end":155,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":13072,"byte_end":13086,"line_start":420,"line_end":420,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":27223,"byte_end":27231,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":44},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":27588,"byte_end":27596,"line_start":42,"line_end":42,"column_start":17,"column_end":25},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":44},"to":{"krate":0,"index":152}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":28218,"byte_end":28226,"line_start":74,"line_end":74,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":44},"to":{"krate":0,"index":148}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":28470,"byte_end":28478,"line_start":83,"line_end":83,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":44},"to":{"krate":0,"index":170}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2057,"byte_end":2061,"line_start":61,"line_end":61,"column_start":25,"column_end":29},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":296},"to":{"krate":2,"index":2614}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2256,"byte_end":2260,"line_start":71,"line_end":71,"column_start":25,"column_end":29},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":296},"to":{"krate":2,"index":2614}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2443,"byte_end":2447,"line_start":81,"line_end":81,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":296},"to":{"krate":2,"index":2614}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2644,"byte_end":2648,"line_start":91,"line_end":91,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":296},"to":{"krate":2,"index":2614}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3941,"byte_end":3949,"line_start":145,"line_end":145,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":314},"to":{"krate":2,"index":2614}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":4131,"byte_end":4139,"line_start":155,"line_end":155,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":314},"to":{"krate":2,"index":2614}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":4894,"byte_end":4899,"line_start":185,"line_end":185,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1678},"to":{"krate":0,"index":148}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7257,"byte_end":7263,"line_start":248,"line_end":248,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":152},"to":{"krate":0,"index":170}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7266,"byte_end":7271,"line_start":248,"line_end":248,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1678},"to":{"krate":0,"index":170}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12015,"byte_end":12021,"line_start":385,"line_end":385,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":152},"to":{"krate":0,"index":206}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,87,105,108,108,32,82,101,103,97,110,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,55,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":13072,"byte_end":13086,"line_start":420,"line_end":420,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":336},"to":{"krate":4294967295,"index":4294967295}}]}